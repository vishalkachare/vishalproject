{
	"name": "df_SCD_Type_2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_SCD_empdata",
						"type": "DatasetReference"
					},
					"name": "TxtFileSrc"
				},
				{
					"dataset": {
						"referenceName": "ds_emp_del_table",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_emp_del_table",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_emp_del_table",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "addIsactiveFlag"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TxtFileSrc",
				"source(output(",
				"          ID as integer,",
				"          Name as string,",
				"          IsActive as boolean,",
				"          Eid as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"TxtFileSrc derive(IsActive = 1) ~> addIsactiveFlag",
				"source1 select(mapColumn(",
				"          SID = ID,",
				"          SName = Name,",
				"          SIsActive = IsActive,",
				"          Eid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"TxtFileSrc, select1 lookup(ID == SID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"filter1 derive(IsActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"lookup1 filter(SIsActive==isBoolean('true')) ~> filter1",
				"addIsactiveFlag sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Name as string,",
				"          IsActive as boolean,",
				"          Eid as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID,",
				"          Name,",
				"          IsActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Name as string,",
				"          IsActive as boolean,",
				"          Eid as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Eid'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID,",
				"          Name,",
				"          IsActive",
				"     )) ~> sink2"
			]
		}
	}
}